Spring Framework

 4버전 	->  5버전
 xml 파일 -> java파일

SpringMVC 중심개발 학습

Spring(Legacy)  vs Spring Boot

* Spring(Legacy) : 초반 설정해야하는 파일의 수가 많음(복잡함)
		   모든 버전의 스프링 사용가능
		   기존의 프로젝트 구조 이해를 위한 방식(사용빈도 높음)
		   다양한 자료(구글링 쉽다)
                 - 초반 설정이 어렵다(프로젝트 초반 1회)
		 - WAS(tomcat)를 사용해야함(리소스가 많이필요함)

* Spring Boot  : 별도의 설정이 필요없음(간편함)
		 WAS가 필요없음(자체서버) => 로딩시간이 짧음
		 버전의 호환성이 우수함 (알아서 해당버젼을 호환)
		- 기존의 방식과 다른방식
 		- JSP 설정방식 문제 

 * Spring Framework
 
   Framework 란? 어떤 대상을 구성하는 구조, 뼈대
    => 소프트웨어적 개념 : 어떤 기능을 미리 클래스/인터페이스 형태로 구현해놓은 틀
                           (어느정도 완성되어 있는 기능/프로젝트)
                           
  - 경량프레임워크 / 자바 오픈소스 프레임워크 
    => 서버중심 개발(확장성,유지보수) => 클라이언트 중심 개발(생산성,안정성)                        
   	   EJB									 (모바일)
  - 프로젝트 전체구조 설계하기 쉬움
  - 다른 프레임워크와 연동
  - 개발의 생산성증가, 개발도구(테스트)
  
  
  * 특징
  - POJO(Plain Old Java Object) 기반의 구성
  - 의존성 주입(DI)을 통한 객체간의 관계 구성
  - AOP(관점지향프로그래밍) 지원
  - 편리한 MVC 구조	   
  - 제어의 역행(IoC)기술을 통한 느슨한 결합제어(수행)
  - 영속성관련 다양한 기술지원
    
 
  * 강한결합 - 약한결합
   서로 관련있는 기능은 강한결합-관련이 없을경우 약한 결합으로 구성
   
  * 제어의 역행(Inversion Of Controller) 
   -> 객체/메서드의 호출을 개발자가 결정 X, 외부에서 결정(부품끼워넣기)
   
   => 의존성 주입(Dependency Injection,DI) : 의존적인 객체를 직접 생성, 제어X
     제어의 역행을 사용하여 객체에 필요한 정보를 외부에서 선택(결정)해서 사용
     1) 생성자 주입 2) setter 주입
     
  * AOP (Aspect Oriented Programming) : 관점지향 프로그래밍
    => 개발자가 주요 로직(비지니스로직)에 집중할수있도록 해준다.
  
  * 영속성(Persistence) : DB 관련된 동작들..   


 ** Spring Framework의 주요 기능
   - Spring Core : 다른 기능들과 설정을 분리하기위한 IoC기능을 제공
   - Spring Context : 스프링기본기능, 애플리케이션 각 기능을 수행하는 객체(빈Bean)에 접근 처리 기능
   - Spring DAO : JDBC기능을 조금더 편리하게 제공
   - Spring ORM : 영속성관련 연동제공 (하이버네이트,마이바티스...)
   - Spring AOP : 관점 지향 프로그래밍 제공
   - Spring Web : 웹 애플리케이션 개발에 필요한 내용 제공
   - Spring MVC : MVC 구현에 필요한 기능 제공
    
   * Maven(빌드도구) : 프로젝트에 필요한 라이브러리(의존적인 라이브러리)를 
   						자동으로 관리해주는 도구













