Spring Framework

 4버전 	->  5버전
 xml 파일 -> java파일

SpringMVC 중심개발 학습

Spring(Legacy)  vs Spring Boot

* Spring(Legacy) : 초반 설정해야하는 파일의 수가 많음(복잡함)
		   모든 버전의 스프링 사용가능
		   기존의 프로젝트 구조 이해를 위한 방식(사용빈도 높음)
		   다양한 자료(구글링 쉽다)
                 - 초반 설정이 어렵다(프로젝트 초반 1회)
		 - WAS(tomcat)를 사용해야함(리소스가 많이필요함)

* Spring Boot  : 별도의 설정이 필요없음(간편함)
		 WAS가 필요없음(자체서버) => 로딩시간이 짧음
		 버전의 호환성이 우수함 (알아서 해당버젼을 호환)
		- 기존의 방식과 다른방식
 		- JSP 설정방식 문제 

 * Spring Framework
 
   Framework 란? 어떤 대상을 구성하는 구조, 뼈대
    => 소프트웨어적 개념 : 어떤 기능을 미리 클래스/인터페이스 형태로 구현해놓은 틀
                           (어느정도 완성되어 있는 기능/프로젝트)
                           
  - 경량프레임워크 / 자바 오픈소스 프레임워크 
    => 서버중심 개발(확장성,유지보수) => 클라이언트 중심 개발(생산성,안정성)                        
   	   EJB									 (모바일)
  - 프로젝트 전체구조 설계하기 쉬움
  - 다른 프레임워크와 연동
  - 개발의 생산성증가, 개발도구(테스트)
  
  
  * 특징
  - POJO(Plain Old Java Object) 기반의 구성
  - 의존성 주입(DI)을 통한 객체간의 관계 구성
  - AOP(관점지향프로그래밍) 지원
  - 편리한 MVC 구조	   
  - 제어의 역행(IoC)기술을 통한 느슨한 결합제어(수행)
  - 영속성관련 다양한 기술지원
    
 
  * 강한결합 - 약한결합
   서로 관련있는 기능은 강한결합-관련이 없을경우 약한 결합으로 구성
   
  * 제어의 역행(Inversion Of Controller) 
   -> 객체/메서드의 호출을 개발자가 결정 X, 외부에서 결정(부품끼워넣기)
   
   => 의존성 주입(Dependency Injection,DI) : 의존적인 객체를 직접 생성, 제어X
     제어의 역행을 사용하여 객체에 필요한 정보를 외부에서 선택(결정)해서 사용
     1) 생성자 주입 2) setter 주입
     
  * AOP (Aspect Oriented Programming) : 관점지향 프로그래밍
    => 개발자가 주요 로직(비지니스로직)에 집중할수있도록 해준다.
  
  * 영속성(Persistence) : DB 관련된 동작들..   


 ** Spring Framework의 주요 기능
   - Spring Core : 다른 기능들과 설정을 분리하기위한 IoC기능을 제공
   - Spring Context : 스프링기본기능, 애플리케이션 각 기능을 수행하는 객체(빈Bean)에 접근 처리 기능
   - Spring DAO : JDBC기능을 조금더 편리하게 제공
   - Spring ORM : 영속성관련 연동제공 (하이버네이트,마이바티스...)
   - Spring AOP : 관점 지향 프로그래밍 제공
   - Spring Web : 웹 애플리케이션 개발에 필요한 내용 제공
   - Spring MVC : MVC 구현에 필요한 기능 제공
    
   * Maven(빌드도구) : 프로젝트에 필요한 라이브러리(의존적인 라이브러리)
               를 자동으로 관리해주는 도구


	* Junit에서 제공되는 어노테이션
	@Test : 테스트를 수행해야하는 동작(메서드)위에 작성
	     => Junit 실행시 @Test 검색 있을경우 테스트용 코드로 인식 후 테스트 진행
	
	@Before : 테스트 이전에 미리 준비되어야 하는 정보들을 담은 메서드 표시
	      => @Test코드 이전에 무조건 실행함.
	
	@After : 테스트 이후에 수행해야하는 동작 표시
	      => @Test코드 이후에 실행.      
	      
	

  
  * 프로젝트의 구성
  1) Presentation Layer : UI 계층에  필요한 정보들을 구성(웹/모바일)
  2) Business Logic Layer(Service Layer) : 서비스 계층, 고객의 요구사항을 처리하는 영역 
  3) Data Access Layer(Persistence Layer) : 데이터 처리 담당하는 계층(DAO)
  4) DB
  
  JSP-MVC
  요청 -> 컨트롤러 - 모델 - DAO(DB)
			|
			뷰
			
  SPRING-MVC
  요청 -> 컨트롤러 - 서비스 - DAO - MyBatis - DB
			|
			뷰
 ------------------|---------|----------------------
   Presentation 	 Service	   Persistence



   DAO - SessionTemplate(주입) - MyBatis - 디비연결정보(DataSource) - DB
   										 - 설정파일
   										 - sql 저장하는 xml파일 (mapper)
|----------------------|
	 Persistence
	

  * 마이바티스(MyBatis)
  마이바티스는 개발자가 지정한 SQL, 저장프로시저 그리고 몇가지 고급 매핑을 지원하는
  퍼시스턴스 프레임워크이다. 마이바티스는 JDBC로 처리하는 상당부분의 코드와 
  파라미터 설정및 결과 매핑을 대신해준다. 마이바티스는 데이터베이스 레코드에 
  원시타입과 Map 인터페이스 그리고 자바 POJO 를 설정해서 매핑하기 위해 XML과 
  애노테이션을 사용할 수 있다.
   https://mybatis.org/mybatis-3/ko/getting-started.html
   
   1) 간결한 코드 처리 (try-catch-finally,pstmt-???,resultset-??)
   2) SQL의 분리 (xml방식,어노테이션 방식)
   3) Spring과의 연동이 편리
   4) 동적 SQL 제공
   
   
   * SqlSessionFactory 객체 (pstmt 역활)
    -> 디비연결(Connection) 처리, SQL 실행
    
    
    iBatis -> MyBatis 
    - 개발 어노테이션 지원
    - 인터페이스 활용한 쿼리
    
    1) xml파일 사용-SQL문 작성, DAO파일에서 xml파일 호출
     장점 : 별도의 파일사용. 유지보수에 유리함
     단점 : 관리해야하는 코드의 양이 증가, 복잡성이 증가
    
    2) 어노테이션을 사용한 SQL 구문작성(인터페이스 사용)
     장점 : DAO파일이 없이 개발가능 => 생산성 증가
     단점 : 코드의 수정이 발생시 마다 컴파일 수행
    
    3) 인터페이스 + xml파일 동시에 사용
     장점 : 간단한 SQL 구문 어노테이션, 복잡한 SQL구문은 XML로 처리(유연한 처리)
     단점 : 개발하는 사람에 따라서 능력차이가 남
     
     
     
	MyBatis - xml파일을 사용해서 SQL 실행방법
	
	- 테이블 생성 및 개발준비     
	- 도메인 객체(DTO) 설계 및 생성(클래스 파일)
	- DAO 인터페이스 생성
	- 인터페이스 안에 필요한 기능을 정의 (추상메서드)
	- XML mapper 생성 
		- mapper DTD 추가
		- mapper의 위치(저장경로) 저장
		- SQL 구문 작성	
	- MyBatis와 XML mapper 연결(인식)
    - DAO 객체 구현(인터페이스 구현)
    - 해당 메서드 사용해서 동작 호출
    - DAO 테스트
    
    
    
    CREATE TABLE `springdb`.`tbl_member` (
  `userid` VARCHAR(50) NOT NULL,
  `userpw` VARCHAR(45) NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `useremail` VARCHAR(200) NOT NULL,
  `regdate` TIMESTAMP NULL DEFAULT now(),
  `updatedate` TIMESTAMP NULL DEFAULT now(),
  PRIMARY KEY (`userid`),
  UNIQUE INDEX `useremail_UNIQUE` (`useremail` ASC) VISIBLE);
    
    
    * Bean vs DTO vs VO
    
     Bean : 자바 순수 객체 (Plain Old Java Object)
     
     DTO : 계층간의 데이터 교환(전송)을 위해서 생성된 객체
          
     VO : 값을 가지는 객체      
    
    
   * 스프링MVC - 컨트롤러 기능
    
    - 스프링MVC 처리
      URI를 분석해서 적절한 컨트롤로 연결 (*.me, *.bo....)
      컨트롤러에 필요한 메서드 호출
      컨트롤러에 처리결과(데이터)를 뷰페이지로 전달
      URI에 적절한 뷰페이지 연결
      적절한 파라미터를 수집(DTO,VO)
      
    - 개발자 처리
      특정 URI에 동작하는 컨트롤러 생성
      컨트롤러 안에 필요한 결과를 메서드 형태로 구현
      서비스 객체 생성
      DAO 객체 생성
      뷰페이지에서 전달받은 정보 출력
    
    
    * Model 객체  / @ModelAttribute
    
    => 정보를 뷰페이지에 전달 (request.setAttribute() 동작)
    
    Model 객체(model.addAttribute()) : 메서드 단위 실행
             key/value 쌍으로 정보를 객체에 저장후 전달
    
    @ModelAttribute : 컨트롤러 단위 실행
             전달된 파라미터의 타입에 맞는 객체를 생성 후
             Model객체에 다시 저장(덮어쓰기)
             
    
   * 컨트롤러는 메서드를 통해서 동작 구현
* 메서드 리턴 타입에 따른 뷰를 연결
    void -> 호출 주소의 이름과 같은 뷰
    String -> 리턴된 문자열이름과 같은 뷰
* 파라미터 (@ModelAttribute)
  객체  Model
  => 뷰페이지에 정보를 각각 전달
* 페이지 이동시엔 redirect: 페이지 이동
  RedirectAttributes 객체 ( 일회성 데이터 전달) 
        
   
   * 각 영역별 개발 준비사항
   데이터베이스
   		디비 생성, 테이블 생성, 더미데이터 준비
   
   스프링MVC
   		프로젝트의 패키지 구조 설계(코드규칙 설계)
   		각각 파트 분배
   		테스트 동작 구현
   
   화면
   		JSP페이지,HTML(JS)페이지 구분
   		페이지 이동간의 경로설정(절대경로,상대경로)
   		
   
   * 비지니스 계층(서비스) : 클라이언트의 요구사항을 구현 하는 영역
   => 컨트롤러 - DAO사이의 접착제(완충제)
   
   
   * log4j 로그 레벨정보
    => 설정한 레벨보다 높은 레벨의 로그만 출력
   
  	FATAL (6)	: 시스템 차원의 심각한 문제발생
  	ERROR		: 실행중 문제가 발생상태 확인
  	WARN		: 시스템의 오류원인 출력
  	INFO		: 로그인여부,실행 여부 (실제 운영필요한 정보)
  	DEBUG		: 디버깅 용도로 사용
  	TRACE (1)	: 상세한 로그정보 출력
   
   		
   
   
  	
	
	
	

